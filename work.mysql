set FOREIGN_KEY_CHECKS = 0;

drop trigger if exists user_count;
-- 创建用户信息表userinfo
drop table if exists userinfo;
create table userinfo (
    user_id int(11) not null,
    user_name varchar(6),
    password varchar(16),
    idcard varchar(18),
    status varchar(2),
    telephone int(11) not null,

    primary key(user_id)
);

-- 创建火车信息
drop table if exists traininfo;
create table traininfo (
    train_id int(11) not null,
    train_name varchar(6),

    primary key(train_id)
);


-- 创建订单信息表orderinfo
drop table if exists orderinfo;
create table orderinfo (
    order_id int(11) not null,
    user_id int(11),
    idcard varchar(18),
    user_name varchar(6),
    train_id int(11),
    train_name varchar(6),
    carriage varchar(1),
    seat_type varchar(6),
    seat_id int(2),
    seat_location varchar(3),
    start_time datetime,
    start_stop_id int(11),
    start_station_name varchar(10),
    end_stop_id int(11),
    end_station_name varchar(10),
    date datetime,
    create_time datetime,
    status varchar(2),

    primary key(order_id),
    constraint fk_order_train foreign key(train_id) references traininfo(train_id),
    constraint fk_user foreign key(user_id) references userinfo(user_id)
);

drop table if exists train_stationinfo;
create table train_stationinfo(
    station_id int,
    station_name varchar(10),
    primary key(station_id)
);

drop table if exists train_stop;
create table train_stop (
    train_id int,
    start_stop_id int,
    start_time datetime,
    end_stop_id int,
    end_time datetime,

    constraint fk_train_id foreign key(train_id) references traininfo(train_id),
    constraint fk_start_stop_id foreign key(start_stop_id) references train_stationinfo(station_id),
    constraint fk_end_stop_id foreign key(end_stop_id) references train_stationinfo(station_id)
);

drop table if exists seatinfo;
create table seatinfo (
    train_id int,
    carriage varchar(1),
    seat_id int,
    seat_type varchar(6),
    seat_location varchar(3),
    status varchar(2),

    primary key(train_id, seat_id),
    constraint fk_seat_train_id foreign key(train_id) references traininfo(train_id)
);

set FOREIGN_KEY_CHECKS = 1;

-- 输入数据，对数据进行增，删，改

insert into userinfo
            values(100000, '小明', '123456', '23542345243242344', 'y', 1313434434),
                  (100001, '小黄', '123344', '34243245234234243', 'y', 1313433654),
                  (100002, '小蓝', '341343rewr', '34324234123213123', 'y', 1553232423),
                  (100003, '小红', 'asf3242344', '23465354234343454', 'y', 1384324232);

insert into traininfo
            values(1000, '和谐号'),
                  (1001, '跃进号'),
                  (1002, '复兴号');

insert into train_stationinfo
            values(1, '沈阳北'),
                  (2, '济南西'),
                  (3, '太原南');

insert into train_stop
            values(1000, 1, '2021-07-04 16:54:34', 2, '2021-07-04 20:54:34'),
                  (1001, 2, '2021-07-04 21:54:34', 3, '2021-07-04 23:54:34');

insert into seatinfo
            values(1000, '1', 1, '一等座', '01A', 'y'),
                  (1000, '1', 2, '一等座', '01B', 'y'),
                  (1000, '1', 3, '一等座', '02A', 'n'),
                  (1000, '1', 4, '一等座', '02B', 'y'),
                  (1000, '1', 5, '一等座', '03A', 'y');


update userinfo set user_name = '小绿'
            where user_id = 100003;

delete from userinfo where user_id = 100002;

-- 为表user建立订单号外码，并参照订单表中的主码，保持参照完整性。
alter table userinfo add order_id int(11);
alter table userinfo add constraint fk_order_id foreign key(order_id) references orderinfo(order_id);

-- 三类完整性控制
alter table userinfo add constraint check_user_id check(user_id >= 100000);

set @sum = 0;

create trigger user_count
        after insert on userinfo
        for each row
        set @sum = @sum + 1;

-- 实验三
-- 添加用户
insert into userinfo
            values(100006, '小蓝', '123314342', '32532435234234234', 'y', 1235434543, null);

-- 登陆
select * from userinfo
            where user_id = 100000;

-- 修改用户
update userinfo set user_name = '小王'
            where user_id = 100000;

-- 添加订单，在本系统中添加订单就意味着锁定座位
insert into orderinfo
            values(10000000, 100000, '23542345243242344', '小王', 1000, 
                    '和谐号', 1, '一等座', 1, '01A', '2021-07-04 16:54:34', 
                    '1', '沈阳北', '2', '太原南', '2020-07-04 17:54:34',
                    '2020-07-04 15:55:34', 'y');

-- 修改订单
update orderinfo set carriage = 2
            where order_id = 10000000;

-- 删除订单
update orderinfo set status = 'n'
            where order_id = 10000000;


-- 实验四

-- 根据用户ID获取订单信息
select * from orderinfo where user_id = 100002;

-- 根据车站获取列车ID
select train_id from train_stationinfo, train_stop
        where train_stop.start_stop_id = train_stationinfo.station_id
        and station_name = '沈阳北';

-- 根据列车ID获取列车信息
select * from traininfo where train_id = 1000;

-- 列车换乘查询
select a.train_id first_train, b.train_id second_train from train_stop a, train_stop b, train_stationinfo c, train_stationinfo d
        where a.end_stop_id = b.start_stop_id
        and a.end_time < b.start_time
        and c.station_name = '沈阳北'
        and d.station_name = '太原南'
        and a.start_stop_id = c.station_id
        and b.end_stop_id = d.station_id;

-- 查询列车座位剩余
select count(*) from seatinfo
        where train_id = 1000
        and status = 'y';

-- 查询所有通列车的城市
select station_name from train_stationinfo, train_stop
        where train_stationinfo.station_id = train_stop.start_stop_id;

-- 使用存储过程对于复杂的SQL进行封装
drop procedure if exists found_exchange;
delimiter //
create procedure found_exchange(in start_station varchar(10), in end_station varchar(10))
begin
    if start_station is not null and end_station is not null then
        select a.train_id first_train, b.train_id second_train from train_stop a, train_stop b, train_stationinfo c, train_stationinfo d
            where a.end_stop_id = b.start_stop_id
            and a.end_time < b.start_time
            and c.station_name = start_station
            and d.station_name = end_station
            and a.start_stop_id = c.station_id
            and b.end_stop_id = d.station_id;
    end if;
end;
//
call found_exchange('沈阳北', '太原南');
